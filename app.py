import json
import os
import streamlit as st
import openai
from dotenv import load_dotenv

load_dotenv()f
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

def get_products_by_name(data, product_name, category=None):
    found_products = []
    for product in data:
        product_title = product["title"]
        product_category = product["category"]
        similarity = fuzz.token_set_ratio(product_name.lower(), product_title.lower())
        if similarity >= 75:
            if category is None or category.lower() == product_category.lower():
                found_products.append(product)
    return found_products


def get_cheapest_product(data, product_name, category=None):
    products = get_products_by_name(data, product_name, category)
    if products:
        try:
            cheapest_product = min(products, key=lambda p: float(p["price"].replace(" ", "").replace(",", "").replace("‚Ç∏", "")))
            return cheapest_product
        except ValueError:
            return None
    return None


openai.api_key = os.getenv('OPENAI_API_KEY')


def generate_gpt_response(prompt, api_key):
    load_dotenv()
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-16k-0613",
        messages=[
            {"role": "system", "content": "You are a helpful cooking assistant."},
            {"role": "user", "content": "–Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ –æ–±—å—è—Å–Ω–µ–Ω–∏–π, –≥—Ä–∞–º–º–æ–≤–æ–∫, —Ü–∏—Ñ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ " + prompt + "–∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–∂–¥—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –∫–∞–∫–æ–π –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ë–∞–∫–∞–ª–µ—è, –û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã, –ö–æ–ª–±–∞—Å—ã –∏ —Å—ã—Ä—ã, –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è, –ö–æ–Ω—Å–µ—Ä–≤—ã, –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —è–π—Ü–∞, –ù–∞–ø–∏—Ç–∫–∏ –∏ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏, –ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã, –•–ª–µ–± –∏ —Ö–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è, –ß–∞–π –∏ –∫–æ—Ñ–µ –∏ –∫–∞–∫–∞–æ, –ú—è—Å–æ –∏ —Ä—ã–±–∞ –∏ –ø—Ç–∏—Ü–∞. –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏  –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –ï—Å–ª–∏ –∑–µ–ª–µ–Ω—å, –º—è—Å–æ, —Å–ø–µ—Ü–∏–∏ —Ç–æ —Å—Ä–∞–∑—É —É—Ç–æ—á–Ω–∏ –∫–∞–∫–∞—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ –∑–µ–ª–µ–Ω—å. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —Å–ª–æ–≤–æ —è–π—Ü–∞, –∏—Å–ø–æ–ª—å–∑—É–π —è–π—Ü–æ. –ï—Å–ª–∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ —Ç–æ –Ω–∞–ø–∏—à–∏ —Å—Ä–∞–∑—É –∫–∞–∫–æ–π –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ –º–∞—Å–ª–æ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã. –£–ö–†–û–ü –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã. –ü–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –°–ö–û–ë–ö–ò"}
        ],
        max_tokens=2500,
        n=1,
        stop=None,
        temperature=0.0,
        api_key=api_key
    )

    return response.choices[0].message.get('content', '')


def parse_ingredients_from_gpt_response(response):
    ingredient_lines = response.split("\n")
    ingredients = []
    for ingredient_line in ingredient_lines:
        parts = ingredient_line.split(" -", 1)

        if len(parts) == 2:
            ingredient = parts[0].strip()
            category = parts[1].strip()
            ingredients.append((ingredient, category))
    return ingredients


def main():
    st.set_page_config(page_title="Ask your ProductAI")
    st.header("Ask your Assistant üí¨")

    if 'history' not in st.session_state:
        st.session_state.history = []

    # read data from file
    with open("arbuz.json", "r") as file:
        data = json.load(file)

    api_key = os.getenv('OPENAI_API_KEY')  # Assuming that the API key is stored in an environment variable

    # show user input
    user_question = st.text_input("Ask a question about a dish you want to cook:")
    user_budget = st.number_input("Enter your budget:")
    if user_question:
        user_question = user_question.lower().strip()

        gpt_response = generate_gpt_response(user_question, api_key)
        ingredients = parse_ingredients_from_gpt_response(gpt_response)

        for ingredient, category in ingredients:
            cheapest_product = get_cheapest_product(data, ingredient, category)

            if cheapest_product:
                st.write(f"{ingredient} - {category}:")

                st.write(cheapest_product["title"])
                st.write("–¶–µ–Ω–∞: " + cheapest_product["price"])
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, –∏—â–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_products = get_products_by_name(data, ingredient, category)
                if category_products:
                    st.write("–¢–æ–≤–∞—Ä", ingredient, "–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", category, ":")
                    st.write(category_products[0]["title"])
                    st.write("–¶–µ–Ω–∞: " + category_products[0]["price"])
                else:
                    st.write(f"–¢–æ–≤–∞—Ä {ingredient} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        st.session_state.history.append({
            'question': user_question,
            'response': gpt_response
        })

    # –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
    st.subheader("Chat History:")
    for entry in st.session_state.history:
        st.write("Question:", entry['question'])
        st.write("Response:", entry['response'])
        st.write("-" * 50)


if __name__ == '__main__':
    main()
